[{"title":"天空广告SDK集成文档","date":"2017-05-02T08:20:49.000Z","path":"2017/05/02/天空广告SDK集成文档/","text":"天空广告SDK集成文档 请在应用中嵌入以下追踪代码，每个应用具有唯一Appkey，该应用的Appkey为 53f417b2fd98c5ff28024176 配置AndroidManifest.xml，添加权限 1234&lt;uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /&gt;&lt;uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" /&gt;&lt;uses-permission android:name=\"android.permission.READ_PHONE_STATE\" /&gt;&lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt; 在应用程序的 Application类的onCreate方法中调用Test类中的sendMessage方法，在方法中传入本应用的Appkey。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380package com.example.umeng.myapplication;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.StringWriter;import java.io.UnsupportedEncodingException;import java.lang.reflect.Method;import java.net.HttpURLConnection;import java.net.URL;import java.net.URLEncoder;import java.util.regex.Matcher;import java.util.regex.Pattern;import android.Manifest;import android.Manifest.permission;import android.content.Context;import android.content.pm.PackageManager;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.net.wifi.WifiInfo;import android.net.wifi.WifiManager;import android.os.Build;import android.os.Environment;import android.provider.Settings.Secure;import android.telephony.TelephonyManager;import android.text.TextUtils;import android.util.DisplayMetrics;import android.util.Log;import android.view.WindowManager;/** * Created by umeng on 17/4/10. */public class Test &#123; private static final Pattern pattern = Pattern.compile(\"UTDID\\\"&gt;([^&lt;]+)\"); private Context mContext = null; private String mAppkey = null; /** * * send message To Server * * @param context * android Context. * @param* * appkey * umeng appkey * * @throws UnsupportedEncodingException */ @SuppressWarnings(\"deprecation\") public void sendMessage(Context context, String appkey) &#123; mContext = context; mAppkey = appkey; new Thread(mNetrequest).start(); &#125; private Runnable mNetrequest = new Runnable() &#123; @Override public void run() &#123; HttpURLConnection conn = null; try &#123; StringBuilder sber = new StringBuilder(); sber.append(\"https://ar.umeng.com/stat.htm?\"); if (!TextUtils.isEmpty(mAppkey)) &#123; sber.append(\"ak=\").append(mAppkey); &#125; String devicename = Build.MODEL; if (!TextUtils.isEmpty(devicename)) &#123; sber.append(\"&amp;device_name=\").append(URLEncoder.encode(devicename, \"UTF-8\")); &#125; TelephonyManager tm = (TelephonyManager) mContext.getSystemService(Context.TELEPHONY_SERVICE); PackageManager pm = mContext.getPackageManager(); if (pm.checkPermission(permission.READ_PHONE_STATE, mContext.getPackageName()) == PackageManager.PERMISSION_GRANTED) &#123; String imei = tm.getDeviceId(); if (!TextUtils.isEmpty(imei)) &#123; sber.append(\"&amp;imei=\").append(URLEncoder.encode(imei, \"UTF-8\")); &#125; &#125; if (pm.checkPermission(permission.ACCESS_WIFI_STATE, mContext.getPackageName()) == PackageManager.PERMISSION_GRANTED) &#123; WifiManager wifi = (WifiManager) mContext.getSystemService(Context.WIFI_SERVICE); WifiInfo info = wifi.getConnectionInfo(); String mac = info.getMacAddress(); // String mac = tm.getDeviceId(); if (!TextUtils.isEmpty(mac)) &#123; sber.append(\"&amp;mac=\").append(URLEncoder.encode(mac, \"UTF-8\")); &#125; &#125; String androidId = Secure.getString(mContext.getContentResolver(), Secure.ANDROID_ID); if (!TextUtils.isEmpty(androidId)) &#123; sber.append(\"&amp;android_id=\").append(URLEncoder.encode(androidId, \"UTF-8\")); &#125; String utdid = getUTDid(mContext); if (!TextUtils.isEmpty(utdid)) &#123; sber.append(\"&amp;utdid=\").append(URLEncoder.encode(utdid, \"UTF-8\")); &#125; String[] networkType = getNetworkAccessMode(mContext); if(networkType!=null) &#123; sber.append(\"&amp;access=\").append(URLEncoder.encode(networkType[0], \"UTF-8\")); sber.append(\"&amp;access_subtype=\").append(URLEncoder.encode(networkType[1], \"UTF-8\")); &#125; String resolution = getDisplayResolution(mContext); if (!TextUtils.isEmpty(resolution)) &#123; sber.append(\"&amp;resolution=\").append(URLEncoder.encode(resolution, \"UTF-8\")); &#125; String carrier = getNetworkOperatorName(mContext); if (!TextUtils.isEmpty(carrier)) &#123; sber.append(\"&amp;carrier=\").append(URLEncoder.encode(carrier, \"UTF-8\")); &#125; sber.append(\"&amp;os=\").append(URLEncoder.encode(\"android\", \"UTF-8\")); String version = android.os.Build.VERSION.RELEASE; if (!TextUtils.isEmpty(version)) &#123; sber.append(\"&amp;os_version=\").append(URLEncoder.encode(version, \"UTF-8\")); &#125; conn = (HttpURLConnection) new URL(sber.toString()).openConnection(); conn.setRequestMethod(\"GET\"); conn.setConnectTimeout(30 * 1000); conn.setReadTimeout(30 * 1000); conn.setDoOutput(true); conn.setDoInput(true); conn.setUseCaches(false); if (Integer.parseInt(Build.VERSION.SDK) &lt; Build.VERSION_CODES.FROYO) &#123; System.setProperty(\"http.keepAlive\", \"false\"); &#125; int code = conn.getResponseCode(); if (code == 200) &#123; InputStream inputStream = conn.getInputStream(); // do something &#125; else &#123; Log.e(\"test\", \"status code: \" + code); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; if (conn != null) &#123; conn.disconnect(); &#125; &#125; &#125; &#125;; /** * * get UTDID * * @param context * @return */ private String getUTDid(Context context) &#123; try &#123; Class&lt;?&gt; utdevice = Class.forName(\"com.ut.device.UTDevice\"); Method reMethod = utdevice.getMethod(\"getUtdid\", Context.class); return (String) reMethod.invoke(null, context); &#125; catch (Exception e) &#123; return readNativeFile(context); &#125; &#125; /** * Get the mobile network access mode. * * @param context * @return A 2-elements String array, 1st specifies the network type, the * 2nd specifies the network subtype. If the network cannot be * retrieved, \"Unknown\" is filled instead. * require &lt;uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /&gt; */ public static String[] getNetworkAccessMode(Context context) &#123; final String Unknown = \"\"; final String WIFI = \"Wifi\"; final String _2G_3G = \"2G/3G\"; String[] res = new String[] &#123; \"\", \"\" &#125;; try &#123; if (!checkPermission(context, Manifest.permission.ACCESS_NETWORK_STATE)) &#123; res[0] = Unknown; return res; &#125; ConnectivityManager connectivity = (ConnectivityManager) context .getSystemService(Context.CONNECTIVITY_SERVICE); if (connectivity == null) &#123; res[0] = Unknown; return res; &#125; else &#123; NetworkInfo wifi_network = connectivity.getNetworkInfo(ConnectivityManager.TYPE_WIFI); if (wifi_network != null) &#123; if (wifi_network.getState() == NetworkInfo.State.CONNECTED) &#123; res[0] = WIFI; return res; &#125; &#125; NetworkInfo mobile_network = connectivity.getNetworkInfo(ConnectivityManager.TYPE_MOBILE); if (mobile_network != null) &#123; if (mobile_network.getState() == NetworkInfo.State.CONNECTED) &#123; res[0] = _2G_3G; res[1] = mobile_network.getSubtypeName(); return res; &#125; &#125; &#125; &#125; catch (Throwable e) &#123; &#125; return res; &#125; /** * get resolution * * @param context * @return e.g.:800*480 */ public static String getDisplayResolution(Context context) &#123; try &#123; DisplayMetrics metrics = new DisplayMetrics(); WindowManager wm = (WindowManager) (context.getSystemService(Context.WINDOW_SERVICE)); wm.getDefaultDisplay().getMetrics(metrics); int width = metrics.widthPixels; int height = metrics.heightPixels; String resolution = String.valueOf(height) + \"*\" + String.valueOf(width); return resolution; &#125; catch (Throwable e) &#123; return \"\"; &#125; &#125; /** * check permission * * @param context * @param permission * &lt;code&gt;android.permission.INTERNET&lt;/code&gt; * @return */ public static boolean checkPermission(Context context, String permission) &#123; boolean result = false; if (Build.VERSION.SDK_INT &gt;= 23) &#123; try &#123; Class&lt;?&gt; clazz = Class.forName(\"android.content.Context\"); Method method = clazz.getMethod(\"checkSelfPermission\", String.class); int rest = (Integer) method.invoke(context, permission); if (rest == PackageManager.PERMISSION_GRANTED) &#123; result = true; &#125; else &#123; result = false; &#125; &#125; catch (Throwable e) &#123; result = false; &#125; &#125; else &#123; PackageManager pm = context.getPackageManager(); if (pm.checkPermission(permission, context.getPackageName()) == PackageManager.PERMISSION_GRANTED) &#123; result = true; &#125; &#125; return result; &#125; /** * get carrier * @param context * @return */ public static String getNetworkOperatorName(Context context) &#123; try &#123; TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE); if (checkPermission(context, Manifest.permission.READ_PHONE_STATE)) &#123; if (tm != null) return tm.getNetworkOperatorName(); &#125; &#125; catch (Throwable e) &#123; &#125; return \"\"; &#125; /** * * read native file method * * @param context * @return */ private String readNativeFile(Context context) &#123; try &#123; File f = getFile(context); if (f == null || !f.exists()) &#123; return null; &#125; FileInputStream fis = new FileInputStream(f); try &#123; return parseId(readStreamToString(fis)); &#125; finally &#123; safeClose(fis); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return null; &#125; /** * * java pattern parse native utdid * * @param content * @return */ private String parseId(String content) &#123; if (content == null) &#123; return null; &#125; Matcher matcher = pattern.matcher(content); if (matcher.find()) &#123; return matcher.group(1); &#125; return null; &#125; /** * read native file * * @param context * @return */ private File getFile(Context context) &#123; PackageManager pm = context.getPackageManager(); if (pm.checkPermission(permission.WRITE_EXTERNAL_STORAGE, context.getPackageName()) == PackageManager.PERMISSION_GRANTED) &#123; return null; &#125; if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) &#123; File sdCardDir = Environment.getExternalStorageDirectory(); try &#123; return new File(sdCardDir.getCanonicalPath(), \".UTSystemConfig/Global/Alvin2.xml\"); &#125; catch (Exception ignore) &#123; &#125; &#125; return null; &#125; /** * * convert inputstream to String * * @param input * @return * @throws * IOException */ private String readStreamToString(InputStream input) throws IOException &#123; InputStreamReader reader = new InputStreamReader(input); char[] buffer = new char[1024]; int n = 0; StringWriter writer = new StringWriter(); while (-1 != (n = reader.read(buffer))) &#123; writer.write(buffer, 0, n); &#125; return writer.toString(); &#125; /** * * close io stream * * @param is */ private void safeClose(InputStream is) &#123; if (is != null) &#123; try &#123; is.close(); &#125; catch (Exception e) &#123; &#125; &#125; &#125; &#125;","tags":[]},{"title":"tomcat 与 nginx，apache的区别是什么？","date":"2017-04-28T08:36:00.000Z","path":"2017/04/28/tomcat-与-nginx，apache的区别是什么？/","text":"HTTP服务器本质上也是一种应用程序——它通常运行在服务器之上，绑定服务器的IP地址并监听某一个tcp端口来接收并处理HTTP请求，这样客户端（一般来说是IE, Firefox，Chrome这样的浏览器）就能够通过HTTP协议来获取服务器上的网页（HTML格式）、文档（PDF格式）、音频（MP4格式）、视频（MOV格式）等等资源. 相同点三者都是web server Apache是Apache软件基金会下的一个项目——Apache HTTP Server Project； Nginx同样也是一款开源的HTTP服务器软件（当然它也可以作为邮件代理服务器、通用的TCP代理服务器）。 Tomcat运行在JVM之上，它和HTTP服务器一样，绑定IP地址并监听TCP端口，同时还包含以下指责： 管理Servlet程序的生命周期 将URL映射到指定的Servlet进行处理 与Servlet程序合作处理HTTP请求——根据HTTP请求生成HttpServletResponse对象并传递给Servlet进行处理，将Servlet中的HttpServletResponse对象生成的内容返回给浏览器. 不同点严格的来说，Apache/Nginx 应该叫做「HTTP Server」；而 Tomcat 则是一个「Application Server」，或者更准确的来说，是一个「Servlet/JSP」应用的容器（Ruby/Python 等其他语言开发的应用也无法直接运行在 Tomcat 上）。 一般的运用场景下，apache和nginx在负载均衡里是前端服务器，用来处理请求的转发（反向代理等）；绝大部分时候他们本身并不会运行项目。tomcat和jetty，WebLogic是后端服务器，是直接用来运行项目的容器。简单来说就是你发出一个请求，先经过apache或nginx，他们会合理地把请求分配到后台比较不忙的tomcat或jetty。tomcat或jetty会把请求处理好返回给apache或nginx，然后a或n会把最终的请求结果告诉你。当然，如果是一些静态的数据，apache和nginx就可以直接返回给你了。 总结三者都是web server，只是侧重点不同。 Nginx的职责：作为前端服务器，处理请求转发，使用场景，做应用服务器的转发（tomcat），邮件代理服务器、通用的TCP代理服务器。 tomcat后端服务器：直接运行项目的容器（java），一般不会直接去处理客户端的请求，毕竟tomcat并发量不是很大，静态的页面交给前端服务器，执行动态部分，起到资源合理配置，减少服务器压力。 apache也是作为前端服务器，不过都有插件支持动态编程语言处理，如 apache和php结合使用，apache和tomcat等。","tags":[]},{"title":"centos下Nginx安装与配","date":"2017-04-28T07:39:10.000Z","path":"2017/04/28/Nginx安装与配/","text":"Nginx是一款轻量级的网页服务器、反向代理服务器。相较于Apache、lighttpd具有占有内存少，稳定性高等优势。它最常的用途是提供反向代理服务。 安装在Centos下，yum源不提供nginx的安装，可以通过切换yum源的方法获取安装。也可以通过直接下载安装包的方法，以下命令均需root权限执行： 安装依赖库首先安装必要的库（nginx 中gzip模块需要 zlib 库，rewrite模块需要 pcre 库，ssl 功能需要openssl库）。 1$ yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel 安装nginx1234567$ cd /usr/local/$ wget http://nginx.org/download/nginx-1.8.0.tar.gz$ tar -zxvf nginx-1.8.0.tar.gz$ cd nginx-1.8.0 $ ./configure --prefix=/usr/local/nginx $ make$ make install 在–prefix后面接以下命令:指定nginx安装目录1--prefix=/usr/local/nginx 启动1$ /usr/local/nginx/sbin/nginx 检查是否启动成功： 打开浏览器访问此机器的 IP，如果浏览器出现 Welcome to nginx! 则表示 Nginx 已经安装并运行成功。 重启：1$ /usr/local/nginx/sbin/nginx –s reload 停止：1$ /usr/local/nginx/sbin/nginx –s stop 测试配置文件是否正常：1$ /usr/local/nginx/sbin/nginx –t 强制关闭：1$ pkill nginx 参考链接：Centos下 Nginx安装与配置nginx服务器安装及配置文件详解","tags":[{"name":"Nginx","slug":"Nginx","permalink":"http://blog.hsy123.tk/tags/Nginx/"}]},{"title":"mac终端ssh登录远程主机","date":"2017-04-28T06:59:55.000Z","path":"2017/04/28/mac终端ssh登录远程主机/","text":"备忘命令1ssh user@ip -p port username:远程主机用户ip:主机ipport: 端口 默认22eg .ssh root@hsy123.tk -p 26910","tags":[{"name":"linux","slug":"linux","permalink":"http://blog.hsy123.tk/tags/linux/"}]},{"title":"hexo爬坑","date":"2017-04-27T07:39:29.000Z","path":"2017/04/27/hexo爬坑/","text":"根_config.yml文件可以设置网站的常用属性。title: #设置网站的标题 eg.Hubery&apos;s Blog subtitle: #设置副标题 eg .求知若饥 虚心若愚 description: # 设置网站的描述 求知若饥 虚心若愚 author: # 作者 Hubery Huang language: #语言 zh-CN keywords: #关键字 android, 移动, app, 技术 设置部署到gitdeploy: type: #这个有几个部署方式 ，推荐用git repository: #部署的地址 https://github.com/huangsongyan/huangsongyan.github.io.git branch: #部署分支 master 常用插件统计插件：百度统计，谷歌统计 评论：多说评论 Disqus评论 来必力评论 友言评论 网易云跟帖评论 畅言评论","tags":[{"name":"hexo","slug":"hexo","permalink":"http://blog.hsy123.tk/tags/hexo/"}]},{"title":"hexo搭建填坑,安装错误及解决方法","date":"2017-04-26T14:28:21.000Z","path":"2017/04/26/hexo搭建填坑-安装错误及解决方法/","text":"hexo搭建的需要的环境 node.js 没有安装node.js的童鞋，具体怎么安装在这里就不提供教程了，提供官网地址 链接地址 git 官网地址 链接地址 hexo安装 安装完前面的两个软件就可以进行安装hexo 打开终端执行下面的代码 123456789npm install hexo-cli -ghexo init blogcd blognpm installhexo server theme下载替换hexo官网有提供很多样式主题提供下载，具体可到官网下载。 不过这里可能有个坑，下载下来的theme的含有.git，本来自己项目也含有.git。就不会要子项目的git上传过去，故下来可以删除主题的.git文件夹或者修改theme的remote地址,再把整个项目上传到git上去。 从git克隆自己的blog项目克隆下来后，要注意有没有下载到相应的主题，不然运行会出现空界面。 接着可以进入项目目录，执行 1npm install 安装相关依赖. 最后执行 1hexo server","tags":[{"name":"hexo","slug":"hexo","permalink":"http://blog.hsy123.tk/tags/hexo/"}]}]